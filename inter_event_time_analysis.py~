import numpy as np
import scipy as sci
import pandas as pd

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
#%matplotlib inline 

from bokeh.plotting import figure, show, output_notebook
from bokeh.charts import *

from collections import defaultdict
from datetime import datetime, timedelta

from model.Base import Base
from model.User import User
from model.Device import Device
from model.DeviceTraffic import DeviceTraffic
from model.DeviceAppTraffic import DeviceAppTraffic
from model.HttpReq import HttpReq
from model.DnsReq import DnsReq
from model.user_devices import user_devices;

from sqlalchemy import create_engine, text, func
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import NullPool

import datautils

from IPython.display import display

output_notebook()

DB='postgresql+psycopg2:///ucnstudy'

engine = create_engine(DB, echo=False, poolclass=NullPool)
Base.metadata.bind = engine
Session = sessionmaker(bind=engine) 


ses = Session()
users = ses.query(User)

for user in users:
    #u = ses.query(User).filter(User.username==uname).one()
    print ('user : ' + user.username)

    devids = ",".join([str(d.id) for d in user.devices if not d.shared])    

    #devids = []
    #devids = devids.append(str(d.id) for d in user.devices if not d.shared)
    #print ('user: ' + user.username)
    #print('devids: ' + str(devids))

    devs = {}
    for d in user.devices:
        devs[d.id] = d.platform

    #print ('devs :' + str(devs))

    iat = []
    
    sqlq = """SELECT ts,lag(ts) OVER (ORDER BY ts) FROM \
    (SELECT ts FROM dnsreqs WHERE devid = :d_id UNION ALL \
     SELECT ts FROM httpreqs2 WHERE devid = :d_id AND user_url = 't' UNION ALL \
    SELECT startts from flows WHERE devid = :d_id) \
    AS events"""#%(devids,devids,devids)
    #print 'lolo'
    #print devids
    for elem_id in devids:
        if elem_id != ',':
            #print devs[int(elem_id)]
            for row in ses.execute(text(sqlq).bindparams(d_id = elem_id)):
                #print 'lala'
                if (row[1]==None):
                    continue
                iat.append((row[0]-row[1]).total_seconds())

            fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(12, 4))
            (x,y) = datautils.aecdf(iat)
            ax1.plot(x,y, '-b', lw=2)
            ax1.set_title('Inter-Event Time [user=%s, events=%d]'%(user.username, len(x)))    
            ax1.set_ylabel('CDF')
            ax1.set_xscale('log')
            ax1.set_xlabel('seconds')
            ax1.set_xticks([0.001,1,60,3600,24*3600])
            ax1.set_xticklabels(['1ms','1s','1min','1h','1day'])    
            ax1.set_xlim(0.001,max(iat))

            xp = filter(lambda v : v>=60, x)
            ax2.plot(xp,y[-len(xp):], '-b', lw=2)
            ax2.set_title('Zoom 1 [values=%d]'%(len(xp)))    
            ax2.set_ylabel('CDF')
            ax2.set_xscale('log')
            ax2.set_xlabel('seconds')
            ax2.set_xticks([60,600,3600,24*3600])
            ax2.set_xticklabels(['1min','10min','1h','1day'])        
            ax2.set_xlim(60,max(iat))
                
            xp = filter(lambda v : v>=600, x)
            ax3.plot(xp,y[-len(xp):], '-b', lw=2)
            ax3.set_title('Zoom 2 [values=%d]'%(len(xp)))    
            ax3.set_ylabel('CDF')
            ax3.set_xscale('log')
            ax3.set_xlabel('seconds')
            ax3.set_xticks([600,3600,3*3600,12*2600,24*3600,3*24*3600,7*24*3600])
            ax3.set_xticklabels(['10min','1h','3h','12h','1d','3d','1w'])        
            ax3.set_xlim(600,max(iat))
    
            plt.tight_layout()
            
            #fig.subplots_adjust(hspace = .8)
            print devs[int(elem_id)]
            fig.savefig('figs_CDF/%s-%s.png' % (user.username, devs[int(elem_id)]))
            plt.close(fig)
